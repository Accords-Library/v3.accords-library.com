/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RecorderBiographies".
 */
export type RecorderBiographies =
  | {
      language: string | Language;
      biography: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      };
      id?: string | null;
    }[]
  | null;
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CategoryTranslations".
 */
export type CategoryTranslations =
  | {
      language: string | Language;
      name: string;
      id?: string | null;
    }[]
  | null;

export interface Config {
  collections: {
    folders: Folder;
    'folders-thumbnails': FoldersThumbnail;
    'library-items': LibraryItem;
    pages: Page;
    'chronology-items': ChronologyItem;
    'chronology-eras': ChronologyEra;
    weapons: Weapon;
    'weapons-groups': WeaponsGroup;
    'weapons-thumbnails': WeaponsThumbnail;
    'library-items-thumbnails': LibraryItemThumbnail;
    'library-items-scans': LibraryItemScans;
    'library-items-gallery': LibraryItemGallery;
    'recorders-thumbnails': RecordersThumbnail;
    files: File;
    notes: Note;
    videos: Video;
    'videos-channels': VideosChannel;
    languages: Language;
    currencies: Currency;
    recorders: Recorder;
    keys: Key;
    tags: Tag;
    'tags-groups': TagsGroup;
    images: Image;
    wordings: Wording;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {};
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "folders".
 */
export interface Folder {
  id: string;
  slug: string;
  icon?: string | null;
  lightThumbnail?: string | FoldersThumbnail | null;
  darkThumbnail?: string | FoldersThumbnail | null;
  translations?:
    | {
        language: string | Language;
        name: string;
        description?: {
          root: {
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            type: string;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  sections?:
    | {
        translations?:
          | {
              language: string | Language;
              name: string;
              id?: string | null;
            }[]
          | null;
        subfolders?: (string | Folder)[] | null;
        id?: string | null;
      }[]
    | null;
  files?:
    | (
        | {
            relationTo: 'library-items';
            value: string | LibraryItem;
          }
        | {
            relationTo: 'pages';
            value: string | Page;
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "folders-thumbnails".
 */
export interface FoldersThumbnail {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "languages".
 */
export interface Language {
  id: string;
  name: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "library-items".
 */
export interface LibraryItem {
  id: string;
  itemType?: ('Textual' | 'Audio' | 'Video' | 'Game' | 'Other') | null;
  language: string | Language;
  slug: string;
  thumbnail?: string | LibraryItemThumbnail | null;
  pretitle?: string | null;
  title: string;
  subtitle?: string | null;
  digital: boolean;
  gallery?:
    | {
        image?: string | LibraryItemGallery | null;
        id?: string | null;
      }[]
    | null;
  scansEnabled?: boolean | null;
  scans?: {
    scanners: (string | Recorder)[];
    cleaners: (string | Recorder)[];
    typesetters?: (string | Recorder)[] | null;
    coverEnabled?: boolean | null;
    cover?: {
      front?: string | LibraryItemScans | null;
      spine?: string | LibraryItemScans | null;
      back?: string | LibraryItemScans | null;
      insideFront?: string | LibraryItemScans | null;
      insideBack?: string | LibraryItemScans | null;
      flapFront?: string | LibraryItemScans | null;
      flapBack?: string | LibraryItemScans | null;
      insideFlapFront?: string | LibraryItemScans | null;
      insideFlapBack?: string | LibraryItemScans | null;
    };
    dustjacketEnabled?: boolean | null;
    dustjacket?: {
      front?: string | LibraryItemScans | null;
      spine?: string | LibraryItemScans | null;
      back?: string | LibraryItemScans | null;
      insideFront?: string | LibraryItemScans | null;
      insideSpine?: string | LibraryItemScans | null;
      insideBack?: string | LibraryItemScans | null;
      flapFront?: string | LibraryItemScans | null;
      flapBack?: string | LibraryItemScans | null;
      insideFlapFront?: string | LibraryItemScans | null;
      insideFlapBack?: string | LibraryItemScans | null;
    };
    obiEnabled?: boolean | null;
    obi?: {
      front?: string | LibraryItemScans | null;
      spine?: string | LibraryItemScans | null;
      back?: string | LibraryItemScans | null;
      insideFront?: string | LibraryItemScans | null;
      insideSpine?: string | LibraryItemScans | null;
      insideBack?: string | LibraryItemScans | null;
      flapFront?: string | LibraryItemScans | null;
      flapBack?: string | LibraryItemScans | null;
      insideFlapFront?: string | LibraryItemScans | null;
      insideFlapBack?: string | LibraryItemScans | null;
    };
    pages?:
      | {
          page: number;
          image: string | LibraryItemScans;
          id?: string | null;
        }[]
      | null;
    archiveFile?: (string | null) | File;
  };
  textual?: {
    subtype?: (string | null) | Key;
    pageCount?: number | null;
    bindingType?: ('Paperback' | 'Hardcover') | null;
    pageOrder?: ('LeftToRight' | 'RightToLeft') | null;
  };
  audio?: {
    audioSubtype?: (string | null) | Key;
    tracks?:
      | {
          title: string;
          file: string | File;
          id?: string | null;
        }[]
      | null;
  };
  video?: {
    subtype?: (string | null) | Key;
  };
  game?: {
    demo?: boolean | null;
    platform?: (string | null) | Key;
    audioLanguages?: (string | Language)[] | null;
    subtitleLanguages?: (string | Language)[] | null;
    interfacesLanguages?: (string | Language)[] | null;
  };
  releaseDate?: string | null;
  categories?: (string | Key)[] | null;
  sizeEnabled?: boolean | null;
  size?: {
    width: number;
    height: number;
    thickness?: number | null;
  };
  priceEnabled?: boolean | null;
  price?: {
    amount: number;
    currency: string | Currency;
  };
  translations?:
    | {
        language: string | Language;
        description: {
          root: {
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            type: string;
            version: number;
          };
          [k: string]: unknown;
        };
        id?: string | null;
      }[]
    | null;
  urls?:
    | {
        url: string;
        id?: string | null;
      }[]
    | null;
  parentItems?: (string | LibraryItem)[] | null;
  subitems?: (string | LibraryItem)[] | null;
  contents?:
    | {
        content: string | Page;
        pageStart?: number | null;
        pageEnd?: number | null;
        timeStart?: number | null;
        timeEnd?: number | null;
        note?: {
          root: {
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            type: string;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "library-items-thumbnails".
 */
export interface LibraryItemThumbnail {
  id: string;
  libraryItem?: (string | LibraryItem)[] | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "library-items-gallery".
 */
export interface LibraryItemGallery {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recorders".
 */
export interface Recorder {
  id: string;
  username: string;
  avatar?: string | RecordersThumbnail | null;
  languages?: (string | Language)[] | null;
  biographies?: RecorderBiographies;
  role?: ('Admin' | 'Recorder' | 'Api')[] | null;
  anonymize: boolean;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recorders-thumbnails".
 */
export interface RecordersThumbnail {
  id: string;
  recorder?: (string | null) | Recorder;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "library-items-scans".
 */
export interface LibraryItemScans {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "files".
 */
export interface File {
  id: string;
  filename: string;
  type: 'LibraryScans' | 'LibrarySoundtracks' | 'ContentVideo' | 'ContentAudio';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "keys".
 */
export interface Key {
  id: string;
  name: string;
  type:
    | 'Contents'
    | 'LibraryAudio'
    | 'LibraryVideo'
    | 'LibraryTextual'
    | 'LibraryGroup'
    | 'Library'
    | 'Weapons'
    | 'GamePlatforms'
    | 'Categories'
    | 'Wordings';
  translations?: CategoryTranslations;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "currencies".
 */
export interface Currency {
  id: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  type: 'Content' | 'Article' | 'Generic';
  slug: string;
  thumbnail?: string | Image | null;
  tags?: (string | Tag)[] | null;
  authors?: (string | Recorder)[] | null;
  translations: {
    language: string | Language;
    sourceLanguage: string | Language;
    pretitle?: string | null;
    title: string;
    subtitle?: string | null;
    summary?: {
      root: {
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        type: string;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    content: {
      root: {
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        type: string;
        version: number;
      };
      [k: string]: unknown;
    };
    transcribers?: (string | Recorder)[] | null;
    translators?: (string | Recorder)[] | null;
    proofreaders?: (string | Recorder)[] | null;
    id?: string | null;
  }[];
  folders?: (string | Folder)[] | null;
  collectibles?: (string | LibraryItem)[] | null;
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images".
 */
export interface Image {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string;
  name?: string | null;
  slug: string;
  translations?:
    | {
        language: string | Language;
        name: string;
        id?: string | null;
      }[]
    | null;
  group: string | TagsGroup;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags-groups".
 */
export interface TagsGroup {
  id: string;
  slug: string;
  icon?: string | null;
  translations?:
    | {
        language: string | Language;
        name: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chronology-items".
 */
export interface ChronologyItem {
  id: string;
  name?: string | null;
  date: {
    year: number;
    month?: number | null;
    day?: number | null;
  };
  events: {
    translations: {
      language: string | Language;
      sourceLanguage: string | Language;
      title?: string | null;
      description?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      notes?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      transcribers?: (string | Recorder)[] | null;
      translators?: (string | Recorder)[] | null;
      proofreaders?: (string | Recorder)[] | null;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chronology-eras".
 */
export interface ChronologyEra {
  id: string;
  slug: string;
  startingYear: number;
  endingYear: number;
  translations?:
    | {
        language: string | Language;
        title: string;
        description?: {
          root: {
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            type: string;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  events?: (string | ChronologyItem)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "weapons".
 */
export interface Weapon {
  id: string;
  slug: string;
  thumbnail?: string | WeaponsThumbnail | null;
  type: string | Key;
  group?: (string | null) | WeaponsGroup;
  appearances: {
    categories: (string | Key)[];
    translations: {
      language: string | Language;
      sourceLanguage: string | Language;
      name: string;
      description?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      level1?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      level2?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      level3?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      level4?: {
        root: {
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          type: string;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      transcribers?: (string | Recorder)[] | null;
      translators?: (string | Recorder)[] | null;
      proofreaders?: (string | Recorder)[] | null;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  updatedBy: string | Recorder;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "weapons-thumbnails".
 */
export interface WeaponsThumbnail {
  id: string;
  weapon?: (string | null) | Weapon;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "weapons-groups".
 */
export interface WeaponsGroup {
  id: string;
  slug: string;
  translations?:
    | {
        language: string | Language;
        name: string;
        id?: string | null;
      }[]
    | null;
  weapons?: (string | Weapon)[] | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notes".
 */
export interface Note {
  id: string;
  note: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos".
 */
export interface Video {
  id: string;
  uid: string;
  gone: boolean;
  source: 'YouTube' | 'NicoNico' | 'Tumblr';
  title: string;
  description?: string | null;
  likes?: number | null;
  views?: number | null;
  publishedDate: string;
  channel?: (string | null) | VideosChannel;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos-channels".
 */
export interface VideosChannel {
  id: string;
  uid: string;
  title: string;
  subscribers?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wordings".
 */
export interface Wording {
  id: string;
  name: string;
  translations?: CategoryTranslations;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'recorders';
    value: string | Recorder;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SpacerBlock".
 */
export interface SpacerBlock {
  size: 'Small' | 'Medium' | 'Large' | 'XLarge';
  blockType: 'spacerBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LineBlock".
 */
export interface LineBlock {
  content: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  };
  blockType: 'lineBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CueBlock".
 */
export interface CueBlock {
  content: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  };
  blockType: 'cueBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TranscriptBlock".
 */
export interface TranscriptBlock {
  lines: (LineBlock | CueBlock | SpacerBlock)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'transcriptBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SectionBlock".
 */
export interface SectionBlock {
  content: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'sectionBlock';
}



/////////////// CONSTANTS ///////////////


export enum Collections {
  ChronologyEras = "chronology-eras",
  ChronologyItems = "chronology-items",
  Currencies = "currencies",
  Files = "files",
  Keys = "keys",
  Languages = "languages",
  LibraryItems = "library-items",
  LibraryItemsThumbnails = "library-items-thumbnails",
  LibraryItemsScans = "library-items-scans",
  LibraryItemsGallery = "library-items-gallery",
  Notes = "notes",
  Pages = "pages",
  PagesThumbnails = "pages-thumbnails",
  Recorders = "recorders",
  RecordersThumbnails = "recorders-thumbnails",
  VideosChannels = "videos-channels",
  Videos = "videos",
  Weapons = "weapons",
  WeaponsGroups = "weapons-groups",
  WeaponsThumbnails = "weapons-thumbnails",
  Folders = "folders",
  FoldersThumbnails = "folders-thumbnails",
  Tags = "tags",
  TagsGroups = "tags-groups",
  Images = "images",
  Wordings = "wordings"
}

export enum CollectionGroups {
  Collections = "Collections",
  Media = "Media",
  Meta = "Meta",
}

export enum KeysTypes {
  Contents = "Contents",
  LibraryAudio = "Library / Audio",
  LibraryVideo = "Library / Video",
  LibraryTextual = "Library / Textual",
  LibraryGroup = "Library / Group",
  Library = "Library",
  Weapons = "Weapons",
  GamePlatforms = "Game Platforms",
  Categories = "Categories",
  Wordings = "Wordings",
}

export enum LanguageCodes {
  en = "English",
  fr = "French",
  ja = "Japan",
  es = "Spanish",
  "pt-br" = "Portuguese",
  "zh" = "Chinese",
}

export enum FileTypes {
  LibraryScans = "Library / Scans",
  LibrarySoundtracks = "Library / Soundtracks",
  ContentVideo = "Content / Video",
  ContentAudio = "Content / Audio",
}

export enum LibraryItemsTypes {
  Textual = "Textual",
  Audio = "Audio",
  Video = "Video",
  Game = "Game",
  Other = "Other",
}

export enum LibraryItemsTextualBindingTypes {
  Paperback = "Paperback",
  Hardcover = "Hardcover",
}

export enum LibraryItemsTextualPageOrders {
  LeftToRight = "Left to right",
  RightToLeft = "Right to left",
}

export enum RecordersRoles {
  Admin = "Admin",
  Recorder = "Recorder",
  Api = "Api",
}

export enum CollectionStatus {
  Draft = "draft",
  Published = "published",
}

export enum VideoSources {
  YouTube = "YouTube",
  NicoNico = "NicoNico",
  Tumblr = "Tumblr",
}

export enum PageType {
  Content = "Content",
  Article = "Article",
  Generic = "Generic",
}

export enum SpacerSizes {
  Small = "Small",
  Medium = "Medium",
  Large = "Large",
  XLarge = "Extra Large",
}

/* RICH TEXT */

export type RichTextContent = {
  root: {
    children: RichTextNode[];
    direction: ("ltr" | "rtl") | null;
    format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
    indent: number;
    type: string;
    version: number;
  };
  [k: string]: unknown;
};

export type RichTextNode = {
  type: string;
  version: number;
  [k: string]: unknown;
};

export interface RichTextNodeWithChildren extends RichTextNode {
  children: RichTextNode[];
}

export interface RichTextParagraphNode extends RichTextNodeWithChildren {
  type: "paragraph";
  format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
}

export interface RichTextListNode extends RichTextNode {
  type: "list";
  children: RichTextNodeWithChildren[];
  listType: string;
}

export interface RichTextListNumberNode extends RichTextListNode {
  listType: "number";
}

export interface RichTextListBulletNode extends RichTextListNode {
  listType: "bullet";
}

export interface RichTextListCheckNode extends RichTextListNode {
  listType: "check";
}

export interface RichTextTextNode extends RichTextNode {
  type: "text";
  format: number;
  text: string;
}

export interface RichTextTabNode extends RichTextNode {
  type: "tab";
  format: number;
}

export interface RichTextLinkNode extends RichTextNodeWithChildren {
  type: "link";
  fields: {
    linkType: "internal" | "custom";
  };
}

export interface RichTextLinkInternalNode extends RichTextLinkNode {
  fields: {
    linkType: "internal";
    newTab: boolean;
    doc: {
      relationTo: string;
      value: any;
    };
  };
}

export interface RichTextLinkCustomNode extends RichTextLinkNode {
  fields: {
    linkType: "custom";
    newTab: boolean;
    url: string;
  };
}

export interface RichTextBlockNode extends RichTextNode {
  type: "block";
  fields: {
    blockType: string;
  };
}

export interface RichTextSectionBlock extends RichTextBlockNode {
  fields: SectionBlock & { anchorHash: string };
}

export interface RichTextTranscriptBlock extends RichTextBlockNode {
  fields: TranscriptBlock;
}

export interface RichTextSpacerBlock extends RichTextBlockNode {
  fields: SpacerBlock;
}

export const isNodeParagraphNode = (node: RichTextNode): node is RichTextParagraphNode =>
  node.type === "paragraph";

export const isNodeListNode = (node: RichTextNode): node is RichTextListNode =>
  node.type === "list";

export const isListNodeNumberListNode = (node: RichTextListNode): node is RichTextListNumberNode =>
  node.listType === "number";

export const isListNodeBulletListNode = (node: RichTextListNode): node is RichTextListBulletNode =>
  node.listType === "bullet";

export const isListNodeCheckListNode = (node: RichTextListNode): node is RichTextListCheckNode =>
  node.listType === "check";

export const isNodeTextNode = (node: RichTextNode): node is RichTextTextNode =>
  node.type === "text";

export const isNodeTabNode = (node: RichTextNode): node is RichTextTabNode => node.type === "tab";

export const isNodeLinkNode = (node: RichTextNode): node is RichTextLinkNode =>
  node.type === "link";

export const isLinkNodeInternalLinkNode = (
  node: RichTextLinkNode
): node is RichTextLinkInternalNode => node.fields.linkType === "internal";

export const isLinkNodeCustomLinkNode = (node: RichTextLinkNode): node is RichTextLinkCustomNode =>
  node.fields.linkType === "custom";

export const isNodeBlockNode = (node: RichTextNode): node is RichTextBlockNode =>
  node.type === "block";

export const isBlockNodeSectionBlock = (node: RichTextBlockNode): node is RichTextSectionBlock =>
  node.fields.blockType === "sectionBlock";

export const isBlockNodeTranscriptBlock = (
  node: RichTextBlockNode
): node is RichTextTranscriptBlock => node.fields.blockType === "transcriptBlock";

export const isBlockNodeSpacerBlock = (node: RichTextBlockNode): node is RichTextSpacerBlock =>
  node.fields.blockType === "spacerBlock";

/* BLOCKS */

/* TODO: TO BE REMOVED WHEN https://github.com/payloadcms/payload/issues/5216 is closed */
export interface CueBlock {
  id?: string | null;
  blockName?: string | null;
}

export interface LineBlock {
  id?: string | null;
  blockName?: string | null;
}

export interface GenericBlock {
  id?: string | null;
  blockName?: string | null;
  blockType: string;
}

export const isBlockCueBlock = (block: GenericBlock): block is CueBlock =>
  block.blockType === "cueBlock";

export const isBlockLineBlock = (block: GenericBlock): block is LineBlock =>
  block.blockType === "lineBlock";

export const isBlockSpacerBlock = (block: GenericBlock): block is SpacerBlock =>
  block.blockType === "spacerBlock";


////////////////// SDK //////////////////

import NodeCache from "node-cache";


const REFRESH_FREQUENCY_IN_SEC = 60;
const CACHE = new NodeCache({
  checkperiod: REFRESH_FREQUENCY_IN_SEC,
  deleteOnExpire: true,
  forceString: true,
  maxKeys: 1,
});
const TOKEN_KEY = "token";

type PayloadLoginResponse = {
  token: string;
  exp: number;
};

const refreshToken = async () => {
  const loginUrl = payloadApiUrl(Collections.Recorders, "login");
  const loginResult = await fetch(loginUrl, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      email: import.meta.env.PAYLOAD_USER,
      password: import.meta.env.PAYLOAD_PASSWORD,
    }),
  });
  logResponse(loginResult);

  if (loginResult.status !== 200) {
    throw new Error("Unable to login");
  }

  const loginJson = (await loginResult.json()) as PayloadLoginResponse;
  const { token, exp } = loginJson;
  const now = Math.floor(Date.now() / 1000);
  const ttl = Math.floor(exp - now - REFRESH_FREQUENCY_IN_SEC * 2);
  const ttlInMinutes = Math.floor(ttl / 60);
  console.log("Token was refreshed. TTL is", ttlInMinutes, "minutes.");
  CACHE.set(TOKEN_KEY, token, ttl);
  return token;
};

const getToken = async (): Promise<string> => {
  const cachedToken = CACHE.get<string>(TOKEN_KEY);
  if (cachedToken !== undefined) {
    const cachedTokenTtl = CACHE.getTtl(TOKEN_KEY) as number;
    const diffInMinutes = Math.floor((cachedTokenTtl - Date.now()) / 1000 / 60);
    console.log("Retrieved token from cache. TTL is", diffInMinutes, "minutes.");
    return cachedToken;
  }
  console.log("Refreshing token");
  return await refreshToken();
};

const injectAuth = async (init?: RequestInit): Promise<RequestInit> => ({
  ...init,
  headers: { ...init?.headers, Authorization: `JWT ${await getToken()}` },
});

const logResponse = (res: Response) => console.log(res.status, res.statusText, res.url);

const payloadApiUrl = (collection: Collections, endpoint?: string): string =>
  `${import.meta.env.PAYLOAD_API_URL}/${collection}${endpoint === undefined ? "" : `/${endpoint}`}`;

const request = async (url: string, init?: RequestInit): Promise<Response> => {
  const result = await fetch(url, await injectAuth(init));
  logResponse(result);

  if (result.status !== 200) {
    throw new Error("Unhandled fetch error");
  }

  return result;
};

// SDK and Types

export type EndpointWeapon = EndpointBasicWeapon & {
  appearances: {
    categories: string[];
    translations: {
      language: string;
      sourceLanguage: string;
      name: string;
      description?: string;
      level1?: string;
      level2?: string;
      level3?: string;
      level4?: string;
      transcribers: string[];
      translators: string[];
      proofreaders: string[];
    }[];
  }[];
  group?: {
    slug: string;
    translations: { language: string; name: string }[];
    weapons: EndpointBasicWeapon[];
  };
};

export type EndpointBasicWeapon = {
  slug: string;
  type: string;
  categories: string[];
  translations: { language: string; name: string; aliases: string[] }[];
  images?: {
    previewCard: PayloadImage;
    thumbnailHeader: PayloadImage;
    lightBox: PayloadImage;
    openGraph: PayloadImage;
  };
};

export type EndpointEra = {
  slug: string;
  startingYear: number;
  endingYear: number;
  translations: {
    language: string;
    title: string;
    description?: string;
  }[];
  items: {
    date: {
      year: number;
      month?: number;
      day?: number;
    };
    events: {
      translations: {
        language: string;
        sourceLanguage: string;
        title?: string;
        description?: string;
        notes?: string;
        transcribers: string[];
        translators: string[];
        proofreaders: string[];
      }[];
    }[];
    createdAt: Date;
    updatedAt: Date;
    updatedBy: string;
  }[];
};

export type EndpointFolder = EndpointFolderPreview & {
  sections:
    | { type: "single"; subfolders: EndpointFolderPreview[] }
    | {
        type: "multiple";
        sections: {
          translations: { language: string; name: string }[];
          subfolders: EndpointFolderPreview[];
        }[];
      };
  files: (
    | {
        relationTo: "library-items";
        value: LibraryItem;
      }
    | {
        relationTo: "pages";
        value: Page;
      }
  )[];
};

export type EndpointFolderPreview = {
  slug: string;
  icon?: string;
  translations: {
    language: string;
    name: string;
    description?: RichTextContent;
  }[];
  lightThumbnail?: PayloadImage;
  darkThumbnail?: PayloadImage;
};

export type EndpointRecorder = {
  id: string;
  username: string;
  avatar?: PayloadImage;
  languages: string[];
  biographies: {
    language: string;
    biography: RichTextContent;
  }[];
};

export type EndpointKey = {
  id: string;
  name: string;
  type: Key["type"];
  translations: {
    language: string;
    name: string;
    short: string;
  }[];
};

export type EndpointWording = {
  name: string;
  translations: {
    language: string;
    name: string;
  }[];
};

export type EndpointTag = {
  slug: string;
  translations: {
    language: string;
    name: string;
  }[];
  group: string;
};

export type EndpointTagsGroup = {
  slug: string;
  icon?: string;
  translations: {
    language: string;
    name: string;
  }[];
  tags: EndpointTag[];
};

export type EndpointPage = {
  slug: string;
  type: PageType;
  thumbnail?: PayloadImage;
  authors: string[];
  tagGroups: TagGroup[];
  translations: {
    language: string;
    sourceLanguage: string;
    pretitle?: string;
    title: string;
    subtitle?: string;
    summary?: RichTextContent;
    content: RichTextContent;
    transcribers: string[];
    translators: string[];
    proofreaders: string[];
    toc: TableOfContentEntry[];
  }[];
  status: "draft" | "published";
  parentPages: ParentPage[];
};

export type ParentPage = {
  slug: string;
  collection: Collections;
  translations: { language: string; name: string }[];
  tag: string;
};

export type TagGroup = { slug: string; icon: string; values: string[] };

export type TableOfContentEntry = {
  prefix: string;
  title: string;
  children: TableOfContentEntry[];
};

export type PayloadImage = {
  url: string;
  width: number;
  height: number;
  mimeType: string;
  filename: string;
};

export const payload = {
  getWeapon: async (slug: string): Promise<EndpointWeapon> =>
    await (await request(payloadApiUrl(Collections.Weapons, `slug/${slug}`))).json(),
  getEras: async (): Promise<EndpointEra[]> =>
    await (await request(payloadApiUrl(Collections.ChronologyEras, `all`))).json(),
  getRootFolders: async (): Promise<EndpointFolderPreview[]> =>
    await (await request(payloadApiUrl(Collections.Folders, `root`))).json(),
  getFolder: async (slug: string): Promise<EndpointFolder> =>
    await (await request(payloadApiUrl(Collections.Folders, `slug/${slug}`))).json(),
  getLanguages: async (): Promise<Language[]> =>
    await (await request(payloadApiUrl(Collections.Languages, `all`))).json(),
  getCurrencies: async (): Promise<Currency[]> =>
    await (await request(payloadApiUrl(Collections.Currencies, `all`))).json(),
  getWordings: async (): Promise<EndpointWording[]> =>
    await (await request(payloadApiUrl(Collections.Wordings, `all`))).json(),
  getRecorders: async (): Promise<EndpointRecorder[]> =>
    await (await request(payloadApiUrl(Collections.Recorders, `all`))).json(),
  getTags: async (): Promise<EndpointTag[]> =>
    await (await request(payloadApiUrl(Collections.Tags, `all`))).json(),
  getTagsGroups: async (): Promise<EndpointTagsGroup[]> =>
    await (await request(payloadApiUrl(Collections.TagsGroups, `all`))).json(),
  getPage: async (slug: string): Promise<EndpointPage> =>
    await (await request(payloadApiUrl(Collections.Pages, `slug/${slug}`))).json(),
};
