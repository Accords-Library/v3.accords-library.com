---
import AppLayout from "components/AppLayout/AppLayout.astro";
import AppLayoutTitle from "components/AppLayout/components/AppLayoutTitle.astro";
import { getI18n } from "src/i18n/i18n";
import { contextCache } from "src/utils/payload";
import { formatCurrency } from "src/utils/currencies";
import { formatLocale } from "src/utils/format";
import { prepareClassForSelectedCurrencyPostProcessing } from "src/middleware/postProcessing";

const { currentLocale } = Astro.locals;
const { t } = await getI18n(currentLocale);
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<AppLayout openGraph={{ title: t("settings.title") }}>
  <AppLayoutTitle title={t("settings.title")} />

  <div id="main">
    <div class="section">
      <h2>{t("settings.language.title")}</h2>
      <p>{t("settings.language.description")}</p><br />
      {
        contextCache.locales.map(({ id }) => (
          <a
            class:list={{ current: currentLocale === id, "pressable-link": true }}
            href={`?action-lang=${id}`}>
            {formatLocale(id)}
          </a>
        ))
      }
    </div>

    <div class="section">
      <h2>{t("settings.theme.title")}</h2>
      <p>{t("settings.theme.description")}</p><br />
      <a class="pressable-link underline-when-dark" href="?action-theme=dark">
        {t("global.theme.dark")}
      </a>
      <a class="pressable-link underline-when-auto" href="?action-theme=auto">
        {t("global.theme.auto")}
      </a>
      <a class="pressable-link underline-when-light" href="?action-theme=light">
        {t("global.theme.light")}
      </a>
    </div>

    <div class="section">
      <h2>{t("settings.currency.title")}</h2>
      <p>{t("settings.currency.description")}</p><br />
      {
        contextCache.currencies.map((id) => (
          <a
            class:list={[
              "pressable-link",
              prepareClassForSelectedCurrencyPostProcessing({ currency: id }),
            ]}
            href={`?action-currency=${id}`}>
            {`${id} (${formatCurrency(id)})`}
          </a>
        ))
      }
    </div>
  </div>
</AppLayout>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  .section {
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: 0.5em;

    & > .current {
      color: var(--color-base-750);
      text-decoration: underline 0.08em var(--color-base-650);
    }
  }

  :global(html.light-theme) a.underline-when-light,
  :global(html.dark-theme) a.underline-when-dark,
  :global(html:not(.light-theme, .dark-theme)) a.underline-when-auto {
    color: var(--color-base-750);
    text-decoration: underline 0.08em var(--color-base-650);
  }

  #main {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 5em;
    margin-top: 4.5em;
  }
</style>
