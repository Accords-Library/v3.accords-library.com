---
import AppLayout from "components/AppLayout/AppLayout.astro";
import AsideLayout from "components/AppLayout/AsideLayout.astro";
import AppLayoutTitle from "components/AppLayout/components/AppLayoutTitle.astro";
import Attributes from "components/Attributes.astro";
import RichText from "components/RichText/RichText.astro";
import { getI18n } from "src/i18n/i18n";
import { payload } from "src/utils/payload";
import type { Attribute } from "src/utils/attributes";
import { formatLocale } from "src/utils/format";
import { fetchOr404 } from "src/utils/responses";
import { sizesToSrcset } from "src/utils/img";

const id = Astro.params.id!;
const recorder = await fetchOr404(() => payload.getRecorderByID(id));
if (recorder instanceof Response) {
  return recorder;
}

const { t, getLocalizedMatch, getLocalizedUrl } = await getI18n(Astro.locals.currentLocale);

const { username, languages, avatar, translations } = recorder;

const { biography, language } =
  translations.length > 0
    ? getLocalizedMatch(translations)
    : { biography: undefined, language: undefined };

const additionalAttributes: Attribute[] = [];

if (languages.length > 0) {
  additionalAttributes.push({
    title: t("collectibles.languages"),
    icon: "material-symbols:translate",
    values: languages.map((lang) => ({ name: formatLocale(lang) })),
    withBorder: true,
  });
}
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<AppLayout>
  <AsideLayout withAside={avatar !== undefined && additionalAttributes.length > 0}>
    <Fragment slot="header">
      <AppLayoutTitle pretitle={`Recorder#${id.substring(0, 5)}`} title={username} />
    </Fragment>

    {
      avatar && (
        <Fragment slot="header-aside">
          <a
            href={getLocalizedUrl(`/images/${avatar.id}`)}
            style={`aspect-ratio: ${avatar.width}/${avatar.height};`}>
            <img
              src={avatar.url}
              srcset={sizesToSrcset(avatar.sizes)}
              sizes={`(max-width: 550px) 90vw, 550px`}
              width={avatar.width}
              height={avatar.height}
            />
          </a>
        </Fragment>
      )
    }

    {
      avatar && additionalAttributes.length > 0 && (
        <Fragment slot="aside">
          <Attributes attributes={additionalAttributes} />
        </Fragment>
      )
    }

    <div id="info">
      {
        !avatar && additionalAttributes.length > 0 && (
          <Attributes attributes={additionalAttributes} />
        )
      }
      {biography && <RichText content={biography} context={{ lang: language }} />}
    </div>
  </AsideLayout>
</AppLayout>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  a {
    max-width: min(35rem, 100%);
    max-height: 50vh;
    overflow: hidden;
    border-radius: 16px;

    transition: 100ms scale;

    @media (max-width: 1280.5px) {
      margin-top: 2em;
    }

    &:hover,
    &:focus-visible {
      scale: 102%;
    }
  }
</style>
