---
import RichText from "components/RichText/RichText.astro";
import type { EndpointPage } from "src/shared/payload/payload-sdk";
import AppLayoutTitle from "components/AppLayout/components/AppLayoutTitle.astro";
import MasoTarget from "components/Maso/MasoTarget.astro";
import TableOfContent from "components/TableOfContent/TableOfContent.astro";
import LanguageOverride from "components/LanguageOverride.astro";
import Credits from "components/Credits.astro";
import { getI18n } from "src/i18n/i18n";
import AsideLayout from "components/AppLayout/AsideLayout.astro";
import AppLayoutDescription from "components/AppLayout/components/AppLayoutDescription.astro";
import Attributes from "components/Attributes.astro";
import type { Attribute } from "src/utils/attributes";
import { payload } from "src/utils/payload";
import { sizesToSrcset } from "src/utils/img";

export const partial = true;

interface Props {
  lang?: string;
  slug?: string;
  page?: EndpointPage;
}

const reqUrl = new URL(Astro.request.url);
const lang = Astro.props.lang ?? reqUrl.searchParams.get("lang")!;
const slug = Astro.props.slug ?? reqUrl.searchParams.get("slug")!;
const { translations, thumbnail, createdAt, updatedAt, updatedBy, attributes } =
  Astro.props.page ?? (await payload.getPage(slug));

const { getLocalizedUrl, t, formatDate } = await getI18n(Astro.locals.currentLocale);
const { getLocalizedMatch } = await getI18n(lang);

const { pretitle, title, subtitle, summary, content, credits, toc, language, sourceLanguage } =
  getLocalizedMatch(translations);

const metaAttributes: Attribute[] = [
  {
    title: t("global.media.attributes.createdAt"),
    icon: "material-symbols:calendar-add-on-outline",
    values: [{ name: formatDate(new Date(createdAt)) }],
  },
  {
    title: t("global.media.attributes.updatedAt"),
    icon: "material-symbols:edit-calendar",
    values: [{ name: formatDate(new Date(updatedAt)) }],
  },
];

if (updatedBy) {
  metaAttributes.push({
    title: t("global.media.attributes.updatedBy"),
    icon: "material-symbols:person-edit-outline",
    values: [{ name: updatedBy.username, href: getLocalizedUrl(`/recorders/${updatedBy.id}`) }],
    withBorder: true,
  });
}
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<MasoTarget>
  <AsideLayout>
    <Fragment slot="header">
      <AppLayoutTitle title={title} pretitle={pretitle} subtitle={subtitle} />
    </Fragment>

    <Fragment slot="header-aside">
      {
        thumbnail && (
          <a id="thumbnail" href={getLocalizedUrl(`/images/${thumbnail.id}`)}>
            <img
              src={thumbnail.url}
              srcset={sizesToSrcset(thumbnail.sizes)}
              sizes={`(max-width: 550px) 90vw, 550px`}
              width={thumbnail.width}
              height={thumbnail.height}
            />
          </a>
        )
      }
    </Fragment>

    <Fragment slot="meta">
      {summary && <AppLayoutDescription description={summary} />}
      {
        attributes.length > 0 && (
          <div id="tags">
            <Attributes attributes={attributes} />
          </div>
        )
      }
    </Fragment>

    <div id="aside" slot="aside">
      <div id="credits">
        {
          translations.length > 1 && (
            <LanguageOverride
              currentLanguage={language}
              currentSourceLanguage={sourceLanguage}
              availableLanguages={translations.map(({ language }) => language)}
              getPartialUrl={(lang) =>
                getLocalizedUrl(`/api/pages/partial?lang=${lang}&slug=${slug}`)
              }
            />
          )
        }

        {credits.length > 0 && <Credits credits={credits} />}
      </div>

      {metaAttributes.length > 0 && <Attributes attributes={metaAttributes} />}

      {toc.length > 0 && <TableOfContent toc={toc} />}
    </div>

    <hr />
    <div id="text">
      <RichText content={content} />
    </div>
  </AsideLayout>
</MasoTarget>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  hr {
    border: none;
    border-top: 3px dotted var(--color-base-500);
    margin-block: 3em;
  }

  #aside {
    display: flex;
    flex-direction: column;
    gap: 4em;

    @media (max-width: 35rem) {
      gap: 6em;
    }
  }

  #tags {
    margin-block: 2em;

    @media (max-width: 1280.5px) {
      margin-bottom: 4em;
    }

    @media (max-width: 35rem) {
      margin-top: 4em;
      margin-bottom: 6em;
    }
  }

  #credits {
    display: flex;
    flex-direction: column;
    gap: 1em;

    @media (max-width: 35rem) {
      gap: 2em;
    }
  }

  #thumbnail {
    border-radius: 16px;
    box-shadow: 0 5px 20px -10px var(--color-shadow);
    overflow: hidden;
    transition: 100ms scale;
    display: block;
    width: fit-content;

    & > img {
      max-width: min(35rem, 100%);
      max-height: 80vh;
      width: auto;
      height: auto;
    }

    @media (max-width: 1280.5px) {
      margin-top: 2em;
    }

    @media (min-width: 1280.5px) {
      margin-bottom: 2em;
    }

    &:hover,
    &:focus-visible {
      scale: 102%;
    }

    &:focus-visible {
      outline: 3px solid var(--color-base-1000);
      outline-offset: unset;
    }
  }
</style>
