---
import RichText from "components/RichText/RichText.astro";
import { payload, type EndpointPage } from "src/shared/payload/payload-sdk";
import AppLayoutTitle from "components/AppLayout/components/AppLayoutTitle.astro";
import MasoTarget from "components/Maso/MasoTarget.astro";
import TagGroups from "components/TagGroups.astro";
import TableOfContent from "components/TableOfContent/TableOfContent.astro";
import LanguageOverride from "components/LanguageOverride.astro";
import Credits from "components/Credits.astro";
import { getI18n } from "src/i18n/i18n";

export const partial = true;

interface Props {
  lang?: string;
  slug?: string;
  page?: EndpointPage;
}

const reqUrl = new URL(Astro.request.url);
const lang = Astro.props.lang ?? reqUrl.searchParams.get("lang")!;
const slug = Astro.props.slug ?? reqUrl.searchParams.get("slug")!;
const page = Astro.props.page ?? (await payload.getPage(slug));

const { getLocalizedUrl } = await getI18n(Astro.locals.currentLocale);
const { getLocalizedMatch } = await getI18n(lang);

const translation = getLocalizedMatch(page.translations);
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<MasoTarget>
  <div id="layout">
    <div id="left">
      <AppLayoutTitle
        title={translation.title}
        pretitle={translation.pretitle}
        subtitle={translation.subtitle}
      />

      {
        page.thumbnail && (
          <a href={getLocalizedUrl(`/images/${page.thumbnail.id}`)}>
            <img
              id="thumbnail"
              class="when-not-large"
              src={page.thumbnail.url}
              width={page.thumbnail.width}
              height={page.thumbnail.height}
            />
          </a>
        )
      }

      {
        translation.summary && (
          <div id="summary" class="high-contrast-text">
            <RichText content={translation.summary} />
          </div>
        )
      }

      {page.tagGroups.length > 0 && <TagGroups tagGroups={page.tagGroups} />}

      <div class="when-not-large meta-container">
        {
          page.translations.length > 1 && (
            <LanguageOverride
              currentLang={lang}
              availableLanguages={page.translations.map(({ language }) => language)}
              getPartialUrl={(lang) =>
                getLocalizedUrl(`/api/pages/partial?lang=${lang}&slug=${slug}`)
              }
            />
          )
        }
        {translation.credits.length > 0 && <Credits credits={translation.credits} />}
      </div>

      {
        translation.toc.length > 0 && (
          <div class="when-not-large meta-container">
            <TableOfContent toc={translation.toc} />
          </div>
        )
      }

      <hr />
      <div id="text">
        <RichText content={translation.content} />
      </div>
    </div>

    <div id="right" class="when-large">
      {
        page.thumbnail && (
          <a href={getLocalizedUrl(`/images/${page.thumbnail.id}`)}>
            <img
              id="thumbnail"
              src={page.thumbnail.url}
              width={page.thumbnail.width}
              height={page.thumbnail.height}
            />
          </a>
        )
      }

      <div class="meta-container">
        {
          page.translations.length > 1 && (
            <LanguageOverride
              currentLang={lang}
              availableLanguages={page.translations.map(({ language }) => language)}
              getPartialUrl={(lang) =>
                getLocalizedUrl(`/api/pages/partial?lang=${lang}&slug=${slug}`)
              }
            />
          )
        }
        {translation.credits.length > 0 && <Credits credits={translation.credits} />}
      </div>

      {translation.toc.length > 0 && <TableOfContent toc={translation.toc} />}
    </div>
  </div>
</MasoTarget>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  #layout {
    display: grid;
    justify-content: space-between;
    container-type: inline-size;

    @media (min-width: 80rem) {
      grid-template-columns: 35rem 35rem;
    }

    & > #left {
      & > a > #thumbnail {
        max-width: 35rem;
        margin-block: 2em;
      }

      & > #summary {
        backdrop-filter: blur(5px);
        padding: 1.5em;
        margin: -1.5em;
        margin-block: 1em;
        border-radius: 3em;
        width: fit-content;
      }

      hr {
        border: none;
        border-top: 3px dotted var(--color-base-500);
        margin-block: 3em;
      }
    }
  }

  #thumbnail {
    width: 100%;
    height: auto;
    border-radius: 16px;
    box-shadow: 0 5px 20px -10px var(--color-shadow);
    transition: 100ms scale;

    &:hover {
      scale: 102%;
    }
  }

  .meta-container {
    @media (max-width: 35rem) {
      margin-block: 5em;
      gap: 2em;
    }

    margin-block: 2em;
    display: grid;
    gap: 1em;
  }

  .when-large {
    @media (max-width: 80rem) {
      display: none !important;
    }
  }

  .when-not-large {
    @media (min-width: 80rem) {
      display: none !important;
    }
  }
</style>
