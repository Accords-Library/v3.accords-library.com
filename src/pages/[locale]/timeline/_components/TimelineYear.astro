---
import type { EndpointChronologyEvent } from "src/shared/payload/payload-sdk";
import TimelineEvent from "./TimelineEvent.astro";
import { getI18n } from "src/i18n/i18n";
import { cache } from "src/utils/payload";

interface Props {
  year: number;
  events: EndpointChronologyEvent[];
}

const { year, events } = Astro.props;
const { formatTimelineDate } = await getI18n(Astro.locals.currentLocale);

const eventsHaveDifferentDates = events.some(
  ({ date }) => JSON.stringify(date) !== JSON.stringify(events[0]?.date)
);
const date = eventsHaveDifferentDates ? { year } : events[0]!.date;
const multiple = events.flatMap(({ events }) => events).length > 1;

if (year === 856) {
  console.log({ eventsHaveDifferentDates, events: events.map(({ date }) => date) });
}
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

{cache.config.timeline.breaks.includes(year) && <hr id={`hr-${year}`} />}

<h2 class="font-2xl" class:list={{ multiple }} id={year.toString()}>
  {formatTimelineDate(date)}
</h2>

<div class="year-container" class:list={{ multiple }}>
  {events.map((event) => <TimelineEvent event={event} displayDate={eventsHaveDifferentDates} />)}
</div>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  hr {
    border: none;
    border-top: 3px dashed var(--color-base-500);
    margin-block: 5em;
    scroll-margin-block: 5em;
  }

  .year-container {
    margin-bottom: 3em;
    width: fit-content;

    &.multiple {
      display: flex;
      flex-direction: column;
      gap: 2.5em;

      border-left: 1px solid;
      border-top: 1px solid;
      border-color: var(--color-base-600);
      border-radius: calc(26px);
      padding: 1em;
    }
  }

  h2 {
    padding-inline: 0.2em;
    color: var(--color-base-700);
    scroll-margin-block: 1em;

    line-height: 2;
    margin-left: 12px;

    &.multiple {
      margin-left: 18px;
    }
  }
</style>
