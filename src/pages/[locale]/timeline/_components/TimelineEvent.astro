---
import { getI18n } from "src/i18n/i18n";
import type { EndpointChronologyEvent } from "src/shared/payload/payload-sdk";
import TimelineEventPartial from "../../api/timeline/partial.astro";

interface Props {
  event: EndpointChronologyEvent;
  displayDate: boolean;
}

const {
  event,
  event: { date, events },
  displayDate,
} = Astro.props;
const { formatTimelineDate, t } = await getI18n(Astro.locals.currentLocale);

const displayedDate =
  !date.month && !date.day
    ? t("timeline.year.during", { year: formatTimelineDate(date) })
    : formatTimelineDate(date);

const multiple = displayDate && events.length > 1;
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<div class="event-container">
  {
    displayDate && (
      <h3 class="font-xl" class:list={{ multiple }}>
        {displayedDate}
      </h3>
    )
  }

  <div class="date-container" class:list={{ multiple }}>
    {
      events.map((_, index) => (
        <TimelineEventPartial
          event={event}
          index={index}
          id={event.id}
          lang={Astro.locals.currentLocale}
        />
      ))
    }
  </div>
</div>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  .event-container {
    & > h3 {
      color: var(--color-base-600);
      line-height: 2;
      margin-bottom: 0.1em;
      margin-left: 16px;

      &.multiple {
        margin-left: 16px;
      }
    }

    & > .date-container {
      display: flex;
      align-items: start;
      flex-direction: column;
      gap: 1em;

      &.multiple {
        border-left: 1px solid;
        border-top: 1px solid;
        border-color: var(--color-base-450);
        border-radius: calc(26px);
        padding: 1em;
      }
    }
  }
</style>
