---
import AppLayout from "components/AppLayout/AppLayout.astro";
import AppLayoutTitle from "components/AppLayout/components/AppLayoutTitle.astro";
import Credits from "components/Credits.astro";
import DownloadButton from "components/DownloadButton.astro";
import RichText from "components/RichText/RichText.astro";
import TagGroups from "components/TagGroups.astro";
import VideoPlayer from "components/VideoPlayer.astro";
import { getI18n } from "src/i18n/i18n";
import { payload } from "src/shared/payload/payload-sdk";
import { formatInlineTitle, formatRichTextToString } from "src/utils/format";
import { fetchOr404 } from "src/utils/responses";

const { id } = Astro.params;
const video = await fetchOr404(() => payload.getVideoByID(id!));
if (video instanceof Response) {
  return video;
}

const { getLocalizedMatch, t, formatFilesize, formatDate } = await getI18n(
  Astro.locals.currentLocale
);
const {
  translations,
  tagGroups,
  filename,
  url,
  credits,
  filesize,
  updatedAt,
  createdAt,
  thumbnail,
} = video;

const { pretitle, title, subtitle, description } = getLocalizedMatch(translations);
const smallTitle = !subtitle && !pretitle;

const attributes = [
  ...(filename && title !== filename
    ? [
        {
          title: t("global.media.attributes.filename"),
          icon: "material-symbols:video-file-outline",
          values: [{ name: filename }],
          withBorder: false,
        },
      ]
    : []),
  {
    title: t("global.media.attributes.filesize"),
    icon: "material-symbols:hard-drive-outline",
    values: [{ name: formatFilesize(filesize) }],
    withBorder: false,
  },
  {
    title: t("global.media.attributes.createdAt"),
    icon: "material-symbols:calendar-add-on-outline",
    values: [{ name: formatDate(new Date(createdAt)) }],
    withBorder: false,
  },
  {
    title: t("global.media.attributes.updatedAt"),
    icon: "material-symbols:edit-calendar",
    values: [{ name: formatDate(new Date(updatedAt)) }],
    withBorder: false,
  },
];
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<AppLayout
  openGraph={{
    thumbnail,
    video,
    description: description ? formatRichTextToString(description) : undefined,
    title: formatInlineTitle({ pretitle, title, subtitle }),
  }}>
  <div id="container">
    <VideoPlayer video={video} />

    <div id="info">
      {
        smallTitle ? (
          <h1>{title}</h1>
        ) : (
          <AppLayoutTitle pretitle={pretitle} title={title} subtitle={subtitle} />
        )
      }
      {description && <RichText content={description} />}
      {tagGroups.length > 0 && <TagGroups tagGroups={tagGroups} />}
      {credits.length > 0 && <Credits credits={credits} />}
      {attributes.length > 0 && <TagGroups tagGroups={attributes} />}
      <DownloadButton href={url} filename={filename} />
    </div>
  </div>
</AppLayout>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  #container {
    display: flex;
    flex-direction: column;
    gap: 6em;
    align-items: center;

    > :global(video) {
      max-height: 60vh;
      max-width: 100%;
      height: auto;
      width: auto;
    }

    h1 {
      max-width: 35em;
    }

    & > #info {
      display: flex;
      flex-direction: column;
      gap: 4em;
      align-items: start;

      @media (max-width: 35rem) {
        gap: 6em;
      }
    }
  }
</style>
