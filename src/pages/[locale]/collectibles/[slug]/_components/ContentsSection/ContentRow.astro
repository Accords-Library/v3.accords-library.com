---
import ErrorMessage from "components/ErrorMessage.astro";
import RichText from "components/RichText/RichText.astro";
import { getI18n } from "src/i18n/i18n";
import { Collections, type EndpointCollectible } from "src/shared/payload/payload-sdk";
import { formatInlineTitle } from "src/utils/format";
import InlineTagGroups from "../../../../../../components/InlineTagGroups.astro";
import Card from "components/Card.astro";
import AudioPlayer from "components/AudioPlayer.astro";
import VideoPlayer from "components/VideoPlayer.astro";

interface Props {
  content: EndpointCollectible["contents"][number];
}

const { getLocalizedMatch, getLocalizedUrl } = await getI18n(Astro.locals.currentLocale);
const {
  content: { content, range },
} = Astro.props;

const href = (() => {
  switch (content.relationTo) {
    case Collections.Pages:
      return getLocalizedUrl(`/pages/${content.value.slug}`);

    case Collections.Videos:
      return getLocalizedUrl(`/videos/${content.value.id}`);

    case Collections.Audios:
      return getLocalizedUrl(`/audios/${content.value.id}`);

    default:
      return undefined;
  }
})();
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<Card href={href}>
  <div id="row">
    <div id="title">
      {
        content.relationTo === Collections.GenericContents ? (
          <p>{getLocalizedMatch(content.value.translations).name}</p>
        ) : content.relationTo === Collections.Pages ? (
          <p>{formatInlineTitle(getLocalizedMatch(content.value.translations))}</p>
        ) : content.relationTo === Collections.Audios ? (
          <p>{formatInlineTitle(getLocalizedMatch(content.value.translations))}</p>
        ) : content.relationTo === Collections.Videos ? (
          <p>{formatInlineTitle(getLocalizedMatch(content.value.translations))}</p>
        ) : (
          <ErrorMessage
            title="Unknown content type"
            description="Please contact website technical administrator."
          />
        )
      }
    </div>

    <div id="dots"></div>

    <div id="range">
      {
        range && (
          <>
            {range.type === "pageRange" ? (
              range.start
            ) : range.type === "timeRange" ? (
              range.start
            ) : range.type === "other" ? (
              <RichText content={getLocalizedMatch(range.translations).note} />
            ) : (
              <ErrorMessage
                title="Unknown range type"
                description="Please contact website technical administrator."
              />
            )}
          </>
        )
      }
    </div>

    {
      content.relationTo === Collections.Audios ? (
        <div class="media">
          <AudioPlayer audio={content.value} />
        </div>
      ) : (
        content.relationTo === Collections.Videos && (
          <div class="media">
            <VideoPlayer video={content.value} />
          </div>
        )
      )
    }

    {
      (content.relationTo === Collections.Pages ||
        content.relationTo === Collections.Audios ||
        content.relationTo === Collections.Videos) &&
        content.value.tagGroups.length > 0 && (
          <div id="tags">
            <InlineTagGroups tagGroups={content.value.tagGroups} />
          </div>
        )
    }
  </div>
</Card>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  :global(a > #card) {
    & > #row > #title {
      transition-duration: 150ms;
      transition-property: text-decoration-color, color;

      text-decoration: underline dotted 0.1em;
      text-decoration-color: transparent;
    }

    &:hover > #row > #title {
      color: var(--color-base-750);
      text-decoration-color: var(--color-base-650);
    }

    &:active > #row > #title {
      color: var(--color-base-1000);
      text-decoration-color: var(--color-base-1000);
    }
  }

  #row {
    padding: 1.5em;

    display: grid;
    grid-template-columns: auto 1fr auto;
    gap: 1em;
    align-items: center;

    & > #title {
      font-weight: 600;
    }

    & > #dots {
      width: 100%;
      min-width: clamp(1em, 0.5em + 5vw, 5em);
      border-bottom: 0.15em dotted var(--color-base-500);
      height: 0.6em;
    }

    & > #tags {
      grid-column: span 2;
    }

    & > .media {
      box-sizing: border-box;
      width: 100%;
      grid-column: span 3;
    }
  }
</style>
