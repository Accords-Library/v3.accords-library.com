---
import ErrorMessage from "components/ErrorMessage.astro";
import RichText from "components/RichText/RichText.astro";
import { getI18n } from "src/i18n/i18n";
import { Collections, type EndpointCollectible } from "src/shared/payload/payload-sdk";
import Card from "components/Card.astro";
import AudioPlayer from "components/AudioPlayer.astro";
import VideoPlayer from "components/VideoPlayer.astro";
import InlineAttributes from "components/InlineAttributes.astro";
import { formatInlineTitle } from "src/utils/format";

interface Props {
  content: EndpointCollectible["contents"][number];
}

const { getLocalizedMatch, getLocalizedUrl } = await getI18n(Astro.locals.currentLocale);
const {
  content: { content, range },
} = Astro.props;

const href = (() => {
  switch (content.relationTo) {
    case Collections.Pages:
      return getLocalizedUrl(`/pages/${content.value.slug}`);

    case Collections.Videos:
      return getLocalizedUrl(`/videos/${content.value.id}`);

    case Collections.Audios:
      return getLocalizedUrl(`/audios/${content.value.id}`);

    default:
      return undefined;
  }
})();

const { title, language } = (() => {
  switch (content.relationTo) {
    case Collections.GenericContents: {
      const { language, name } = getLocalizedMatch(content.value.translations);
      return { title: name, language };
    }

    case Collections.Pages: {
      const translation = getLocalizedMatch(content.value.translations);
      return { title: formatInlineTitle(translation), language: translation.language };
    }

    case Collections.Audios: {
      const translation = getLocalizedMatch(content.value.translations);
      return { title: formatInlineTitle(translation), language: translation.language };
    }

    case Collections.Videos: {
      const translation = getLocalizedMatch(content.value.translations);
      return { title: formatInlineTitle(translation), language: translation.language };
    }

    default: {
      return { title: undefined, language: undefined };
    }
  }
})();
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<Card href={href} class="content_row-card">
  <div id="title">
    {
      title ? (
        <p lang={language}>{title}</p>
      ) : (
        <ErrorMessage
          title="Unknown content type"
          description="Please contact website technical administrator."
        />
      )
    }
  </div>

  <div id="dots"></div>

  <div id="range">
    {
      range && (
        <>
          {range.type === "pageRange" ? (
            range.start
          ) : range.type === "timeRange" ? (
            range.start
          ) : range.type === "other" ? (
            <RichText
              content={getLocalizedMatch(range.translations).note}
            /> /* TODO: Provide lang */
          ) : (
            <ErrorMessage
              title="Unknown range type"
              description="Please contact website technical administrator."
            />
          )}
        </>
      )
    }
  </div>

  {
    content.relationTo === Collections.Audios ? (
      <div class="media">
        <AudioPlayer audio={content.value} />
      </div>
    ) : (
      content.relationTo === Collections.Videos && (
        <div class="media">
          <VideoPlayer video={content.value} />
        </div>
      )
    )
  }

  {
    (content.relationTo === Collections.Pages ||
      content.relationTo === Collections.Audios ||
      content.relationTo === Collections.Videos) &&
      content.value.attributes.length > 0 && (
        <div id="tags">
          <InlineAttributes attributes={content.value.attributes} />
        </div>
      )
  }
</Card>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  .content_row-card {
    padding: 1.5em;

    display: grid;
    grid-template-columns: auto 1fr auto;
    gap: 1em;
    align-items: center;

    &a > #title {
      transition-duration: 150ms;
      transition-property: text-decoration-color, color;

      text-decoration: underline dotted 0.1em;
      text-decoration-color: transparent;
    }

    &a:hover > #title {
      color: var(--color-base-750);
      text-decoration-color: var(--color-base-650);
    }

    &a:active > #title {
      color: var(--color-base-1000);
      text-decoration-color: var(--color-base-1000);
    }

    & > #title {
      font-weight: 600;
    }

    & > #dots {
      width: 100%;
      min-width: clamp(1em, 0.5em + 5vw, 5em);
      border-bottom: 0.15em dotted var(--color-base-500);
      height: 0.6em;
    }

    & > #tags {
      grid-column: span 2;
    }

    & > .media {
      box-sizing: border-box;
      width: 100%;
      grid-column: span 3;
    }
  }
</style>
