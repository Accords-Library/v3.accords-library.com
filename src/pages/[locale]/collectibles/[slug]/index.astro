---
import AppLayout from "components/AppLayout/AppLayout.astro";
import AppLayoutTitle from "components/AppLayout/components/AppLayoutTitle.astro";
import { getI18n } from "src/i18n/i18n";
import { fetchOr404 } from "src/utils/responses";
import ImageTile from "./_components/ImageTile.astro";
import SizeInfo from "./_components/SizeInfo.astro";
import PageInfo from "./_components/PageInfo.astro";
import AvailabilityInfo from "./_components/AvailabilityInfo.astro";
import WeightInfo from "./_components/WeightInfo.astro";
import SubitemSection from "./_components/SubitemSection.astro";
import ContentsSection from "./_components/ContentsSection/ContentsSection.astro";
import { formatInlineTitle, formatLocale, formatRichTextToString } from "src/utils/format";
import AsideLayout from "components/AppLayout/AsideLayout.astro";
import Attributes from "components/Attributes.astro";
import type { Attribute } from "src/utils/attributes";
import { payload } from "src/services";
import { sizesToSrcset } from "src/utils/img";
import RichText from "components/RichText/RichText.astro";
import SubFilesSection from "./_components/SubFilesSection.astro";
import PriceInfo from "./_components/PriceInfo.astro";
import { CollectibleNature, Collections } from "src/shared/payload/constants";
import { sortBy } from "src/utils/array";

const slug = Astro.params.slug!;
const { getLocalizedMatch, getLocalizedUrl, t, formatDate } = await getI18n(
  Astro.locals.currentLocale
);

const response = await fetchOr404(() => payload.getCollectible(slug));
if (response instanceof Response) {
  return response;
}
const collectible = response.data;

const {
  translations,
  thumbnail,
  size,
  price,
  releaseDate,
  pageInfo,
  urls,
  weight,
  backgroundImage,
  gallery,
  scans,
  subitems,
  files,
  backlinks,
  attributes,
  contents,
  createdAt,
  updatedAt,
  updatedBy,
  languages,
  nature,
} = collectible;

const translation = getLocalizedMatch(translations);
const { pretitle, title, subtitle, description, language } = translation;

const metaAttributes: Attribute[] = [
  {
    title: t("global.media.attributes.createdAt"),
    icon: "material-symbols:calendar-add-on",
    values: [{ name: formatDate(new Date(createdAt)) }],
    withBorder: false,
  },
  {
    title: t("global.media.attributes.updatedAt"),
    icon: "material-symbols:edit-calendar",
    values: [{ name: formatDate(new Date(updatedAt)) }],
    withBorder: false,
  },
];

if (updatedBy) {
  metaAttributes.push({
    title: t("global.media.attributes.updatedBy"),
    icon: "material-symbols:person-edit",
    values: [{ name: updatedBy.username, href: getLocalizedUrl(`/recorders/${updatedBy.id}`) }],
    withBorder: true,
  });
}

const additionalAttributes = [
  {
    title: t("collectibles.nature"),
    icon: "material-symbols:leaf-spark",
    values: [
      {
        name: t(
          nature === CollectibleNature.Physical
            ? "collectibles.nature.physical"
            : "collectibles.nature.digital"
        ),
      },
    ],
    withBorder: true,
  },
];

if (releaseDate) {
  additionalAttributes.push({
    title: t("collectibles.releaseDate"),
    icon: "material-symbols:calendar-month",
    values: [{ name: formatDate(new Date(releaseDate)) }],
    withBorder: false,
  });
}

if (languages.length > 0) {
  additionalAttributes.push({
    title: t("collectibles.languages"),
    icon: "material-symbols:translate",
    values: languages.map((lang) => ({ name: formatLocale(lang) })),
    withBorder: true,
  });
}

sortBy(backlinks, ({ type }) => type, [Collections.Collectibles, Collections.Folders] as const);
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<AppLayout
  openGraph={{
    title: formatInlineTitle(translation),
    description: description && formatRichTextToString(description),
    thumbnail,
  }}
  topBar={{
    relations: backlinks,
    relationPageUrl: getLocalizedUrl(`/collectibles/${slug}/relations`),
  }}
  backgroundImage={backgroundImage ?? thumbnail}>
  <AsideLayout reducedAsideWidth>
    <Fragment slot="header">
      <AppLayoutTitle title={title} pretitle={pretitle} subtitle={subtitle} lang={language} />
    </Fragment>

    <Fragment slot="header-aside">
      {
        (thumbnail || gallery || scans) && (
          <div id="images">
            {thumbnail && (
              <a
                id="thumbnail"
                href={getLocalizedUrl(`/images/${thumbnail.id}`)}
                style={`aspect-ratio: ${thumbnail.width}/${thumbnail.height};`}>
                <img
                  src={thumbnail.url}
                  srcset={sizesToSrcset(thumbnail.sizes)}
                  sizes={`(max-width: 550px) 90vw, 550px`}
                  width={thumbnail.width}
                  height={thumbnail.height}
                />
              </a>
            )}

            {(gallery || scans) && (
              <div
                id="gallery-scans"
                class:list={{ "when-no-print": true, "with-two": gallery && scans }}>
                {gallery && (
                  <ImageTile
                    image={gallery.thumbnail}
                    title={t("collectibles.gallery.title")}
                    subtitle={t("collectibles.gallery.subtitle", { count: gallery.count })}
                    href={getLocalizedUrl(`/collectibles/${slug}/gallery`)}
                  />
                )}

                {scans && (
                  <ImageTile
                    image={scans.thumbnail}
                    title={t("collectibles.scans.title")}
                    subtitle={t("collectibles.scans.subtitle", { count: scans.count })}
                    href={getLocalizedUrl(`/collectibles/${slug}/scans`)}
                  />
                )}
              </div>
            )}
          </div>
        )
      }
    </Fragment>

    <Fragment slot="aside">
      <Attributes attributes={metaAttributes} />
    </Fragment>

    <Fragment slot="meta">
      {description && <RichText content={description} context={{ lang: language }} />}

      <div id="attributes">
        <Attributes attributes={[...attributes, ...additionalAttributes]}>
          {price && <PriceInfo price={price} />}

          <AvailabilityInfo urls={urls} price={price !== undefined} releaseDate={releaseDate} />

          {size && <SizeInfo size={size} />}

          {weight && <WeightInfo weight={weight} />}

          {pageInfo && <PageInfo pageInfo={pageInfo} />}
        </Attributes>
      </div>
    </Fragment>

    {subitems.length > 0 && <SubitemSection subitems={subitems} />}
    {files.length > 0 && <SubFilesSection files={files} />}
    {contents.length > 0 && <ContentsSection contents={contents} />}
  </AsideLayout>
</AppLayout>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  #attributes {
    margin-block: 24px;
  }

  #images {
    display: flex;
    flex-direction: column;
    gap: 24px;

    & > #thumbnail {
      max-height: 80vh;
      box-shadow: 0 5px 20px -10px var(--color-shadow-0);
      transition: 100ms scale;

      &:hover,
      &:focus-visible {
        scale: 102%;
      }
    }

    & > #gallery-scans {
      &.with-two {
        display: flex;
        gap: 24px;

        @media (max-width: 400.5px) {
          flex-direction: column;
        }
      }

      @media (max-width: 1280.5px) {
        max-width: 35rem;
      }
    }
  }
</style>
