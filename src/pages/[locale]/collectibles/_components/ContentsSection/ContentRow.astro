---
import ErrorMessage from "components/ErrorMessage.astro";
import RichText from "components/RichText/RichText.astro";
import { getI18n } from "src/i18n/i18n";
import type { EndpointCollectible } from "src/shared/payload/payload-sdk";
import { formatInlineTitle } from "src/utils/format";
import InlineTagGroups from "./InlineTagGroups.astro";
import ConditionalWrapper from "components/ConditionalWrapper.astro";
import Link from "components/Link.astro";

interface Props {
  content: EndpointCollectible["contents"][number];
}

const { getLocalizedMatch, getLocalizedUrl } = await getI18n(Astro.locals.currentLocale);
const {
  content: { content, range },
} = Astro.props;

const href =
  content.relationTo === "pages" ? getLocalizedUrl(`/pages/${content.value.slug}`) : undefined;
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<ConditionalWrapper condition={href !== undefined} wrapper={Link} props={{ href: href! }}>
  <div id="row">
    <div id="title">
      {
        content.relationTo === "generic-contents" ? (
          <p>{getLocalizedMatch(content.value.translations).name}</p>
        ) : content.relationTo === "pages" ? (
          <p>{formatInlineTitle(getLocalizedMatch(content.value.translations))}</p>
        ) : (
          <ErrorMessage
            title="Unknown content type"
            description="Please contact website technical administrator."
          />
        )
      }
    </div>

    <div id="dots"></div>

    <div id="range">
      {
        range && (
          <>
            {range.type === "pageRange" ? (
              range.start
            ) : range.type === "timeRange" ? (
              range.start
            ) : range.type === "other" ? (
              <RichText content={getLocalizedMatch(range.translations).note} />
            ) : (
              <ErrorMessage
                title="Unknown range type"
                description="Please contact website technical administrator."
              />
            )}
          </>
        )
      }
    </div>

    {
      content.relationTo === "pages" && content.value.tagGroups.length > 0 && (
        <div id="tags">
          <InlineTagGroups tagGroups={content.value.tagGroups} />
        </div>
      )
    }
  </div>
</ConditionalWrapper>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  :global(a) > #row {
    transition-duration: 150ms;
    transition-property: border-color, box-shadow;

    & > #title {
      transition-duration: 150ms;
      transition-property: text-decoration-color, color;

      text-decoration: underline dotted 0.1em;
      text-decoration-color: transparent;
    }

    &:hover {
      border-color: var(--color-base-650);
      box-shadow: 0 2px 2px var(--color-shadow-2);

      & > #title {
        color: var(--color-base-750);
        text-decoration-color: var(--color-base-650);
      }
    }

    &:active {
      border-color: var(--color-base-1000);
      box-shadow: 0 6px 12px 2px var(--color-shadow-2);

      & > #title {
        color: var(--color-base-1000);
        text-decoration-color: var(--color-base-1000);
      }
    }
  }

  #row {
    border-radius: 1em;
    box-shadow: 0 1px 2px 0 var(--color-shadow-2);

    backdrop-filter: blur(10px);
    background-color: color-mix(in srgb, var(--color-elevation-2) 50%, transparent);

    border: 1px solid var(--color-base-300);
    padding: 1.5em;

    display: grid;
    grid-template-columns: auto 1fr auto;
    gap: 1em;
    align-items: center;

    & > #title {
      font-weight: 600;
    }

    & > #dots {
      width: 100%;
      min-width: clamp(1em, 0.5em + 5vw, 5em);
      border-bottom: 0.15em dotted var(--color-base-500);
      height: 0.6em;
    }

    & > #tags {
      grid-column: span 2;
    }
  }
</style>
