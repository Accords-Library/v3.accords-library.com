---
import AppEmptyLayout from "components/AppLayout/AppEmptyLayout.astro";
import AppLayoutTitle from "components/AppLayout/components/AppLayoutTitle.astro";
import AudioPlayer from "components/AudioPlayer.astro";
import Credits from "components/Credits.astro";
import DownloadButton from "components/DownloadButton.astro";
import RichText from "components/RichText/RichText.astro";
import TagGroups from "components/TagGroups.astro";
import { getI18n } from "src/i18n/i18n";
import { payload } from "src/shared/payload/payload-sdk";
import { formatInlineTitle, formatRichTextToString } from "src/utils/format";
import { fetchOr404 } from "src/utils/responses";

const { id } = Astro.params;
const audio = await fetchOr404(() => payload.getAudioByID(id!));
if (audio instanceof Response) {
  return audio;
}

const { getLocalizedMatch, t, formatFilesize, formatDate } = await getI18n(
  Astro.locals.currentLocale
);
const {
  translations,
  tagGroups,
  filename,
  url,
  credits,
  filesize,
  createdAt,
  updatedAt,
  thumbnail,
} = audio;

const { pretitle, title, subtitle, description } = getLocalizedMatch(translations);

const smallTitle = !subtitle && !pretitle;

const tagsAndAttributes = [
  ...tagGroups,
  ...(filename && title !== filename
    ? [
        {
          title: t("global.media.attributes.filename"),
          icon: "material-symbols:audio-file-outline",
          values: [filename],
          withBorder: false,
        },
      ]
    : []),
  {
    title: t("global.media.attributes.filesize"),
    icon: "material-symbols:hard-drive-outline",
    values: [formatFilesize(filesize)],
    withBorder: false,
  },
  {
    title: t("global.media.attributes.createdAt"),
    icon: "material-symbols:calendar-add-on-outline",
    values: [formatDate(new Date(createdAt))],
    withBorder: false,
  },
  {
    title: t("global.media.attributes.updatedAt"),
    icon: "material-symbols:edit-calendar",
    values: [formatDate(new Date(updatedAt))],
    withBorder: false,
  },
];
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<AppEmptyLayout
  openGraph={{
    thumbnail,
    audio,
    description: description ? formatRichTextToString(description) : undefined,
    title: formatInlineTitle({ pretitle, title, subtitle }),
  }}>
  <div id="container">
    <AudioPlayer audio={audio} />

    <div>
      {
        smallTitle ? (
          <h1>{title}</h1>
        ) : (
          <AppLayoutTitle pretitle={pretitle} title={title} subtitle={subtitle} />
        )
      }
      {description && <RichText content={description} />}
      <div>
        {tagsAndAttributes.length > 0 && <TagGroups tagGroups={tagsAndAttributes} />}
        {credits.length > 0 && <Credits credits={credits} />}
      </div>
      <DownloadButton href={url} filename={filename} />
    </div>
  </div>
</AppEmptyLayout>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  #container {
    display: flex;
    flex-direction: column;
    gap: 6em;
    margin-top: 6em;
    align-items: center;

    > :global(audio) {
      width: 100%;
    }

    h1 {
      max-width: 35em;
    }

    & > div {
      display: flex;
      flex-direction: column;
      gap: 2em;
      align-items: start;

      & > div {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        gap: 2em 6em;
        width: 100%;
      }
    }
  }
</style>
