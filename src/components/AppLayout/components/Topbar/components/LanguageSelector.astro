---
import Button from "components/Button.astro";
import Tooltip from "components/Tooltip.astro";
import { getI18n } from "src/i18n/i18n";
import { contextCache } from "src/utils/payload";
import { formatLocale } from "src/utils/format";

interface Props {
  withTitle?: boolean | undefined;
  class?: string | undefined;
}

const { withTitle, ...otherProps } = Astro.props;

const { currentLocale } = Astro.locals;
const { t } = await getI18n(currentLocale);

const getActionLanguage = (value: string) => {
  const requestSearchParams = new URL(Astro.request.url).searchParams;
  const newSearchParams = new URLSearchParams(requestSearchParams);
  newSearchParams.set("action-lang", value);
  return `?${newSearchParams}`;
};
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<Tooltip trigger="click" {...otherProps.class ? otherProps : {}}>
  <div id="content" slot="tooltip-content">
    {
      contextCache.locales.map((locale) => (
        <a
          class:list={{ current: currentLocale === locale, "pressable-link": true }}
          href={getActionLanguage(locale)}>
          {formatLocale(locale)}
        </a>
      ))
    }
  </div>
  <Button
    icon="material-symbols:translate"
    title={withTitle ? currentLocale.toUpperCase() : undefined}
    ariaLabel={t("header.topbar.language.tooltip")}
  />
</Tooltip>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  #content {
    display: grid;
    gap: 0.5em;

    & > .current {
      color: var(--color-base-750);
      text-decoration: underline 0.08em var(--color-base-650);
    }
  }
</style>
