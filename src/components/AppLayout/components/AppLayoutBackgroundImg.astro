---
import type {
  EndpointImage,
  EndpointMediaThumbnail,
  EndpointScanImage,
} from "src/shared/payload/payload-sdk";
import { getRandomId } from "src/utils/random";
import { sizesToSrcset } from "src/utils/img";

interface Props {
  img: EndpointImage | EndpointMediaThumbnail | EndpointScanImage;
}

const {
  img: { url, width, height, sizes },
} = Astro.props;

const uniqueId = getRandomId();

const style = `
@media (max-aspect-ratio: ${width}/${height * 0.85}) {
  #${uniqueId} {
      mask-image: linear-gradient( to bottom, rgba(0 0 0 / 30%) 0%, transparent 100% );
  }
}`; // Required to be done like this because we can't insert variables in media queries with Astro.
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<div>
  <img
    id={uniqueId}
    src={url}
    srcset={sizesToSrcset(sizes)}
    sizes="100vw"
    width={width}
    height={height}
    loading="lazy"
    class="when-no-print"
  />
</div>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style set:html={style} is:inline></style>

<style>
  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  div {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    overflow: hidden;
    z-index: -1;
  }

  img {
    width: 100%;
    height: auto;
    max-height: 100%;

    object-fit: cover;
    object-position: 50% 0;

    mask-image: linear-gradient(
      to bottom,
      rgba(0 0 0 / 30%) 0%,
      rgba(0 0 0 / 5%) 100vh,
      rgba(0 0 0 / 5%) 80%,
      transparent 100%
    );

    user-select: none;

    animation: fadeIn 3s forwards;

    @media (min-width: 650.5px) {
      transform: translateY(calc(var(--scroll-absolute) * 0.4px));
    }
  }
</style>

{/* ------------------------------------------- JS --------------------------------------------- */}

<script define:vars={{ uniqueId }} is:inline>
  const element = document.getElementById(uniqueId);
  element.style.animationPlayState = "paused";

  element.addEventListener(
    "load",
    () => {
      element.style.animationPlayState = "running";
    },
    { once: true, passive: true }
  );
</script>
