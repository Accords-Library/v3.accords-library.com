---
import type {
  EndpointImage,
  EndpointMediaThumbnail,
  EndpointScanImage,
} from "src/shared/payload/payload-sdk";
import { getRandomId } from "src/utils/random";
import { sizesToSrcset } from "src/utils/img";

interface Props {
  img: EndpointImage | EndpointMediaThumbnail | EndpointScanImage;
}

const {
  img: { url, width, height, sizes },
} = Astro.props;

const uniqueId = getRandomId();
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<div inert>
  <img
    id={uniqueId}
    src={url}
    srcset={sizesToSrcset(sizes)}
    sizes="100vw"
    width={width}
    height={height}
    loading="lazy"
    class="when-no-print"
    decoding="async"
    alt=""
  />
</div>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 0.3;
    }
  }

  @keyframes parallax {
    from {
      transform: translateY(0);
    }

    to {
      transform: translateY(calc((100cqb - 100lvh) * var(--parallax-amount)));
    }
  }

  div {
    container-type: size;
    position: absolute;
    inset: 0;
    z-index: -9999;
    overflow: hidden;

    animation: fadeIn 3s forwards;
  }

  img {
    width: 100%;
    max-height: 100%;
    min-height: 100lvh;

    object-fit: cover;
    object-position: 50% 0;

    mask-image: linear-gradient(to bottom, rgba(0 0 0 / 100%) min(50vh, 50%), transparent),
      linear-gradient(to right, rgba(0 0 0 / 20%) 640px, black 1200px);
    mask-composite: intersect;

    @supports (animation-timeline: scroll(root)) {
      --parallax-amount: 0.4;
      animation-name: parallax;
      animation-timing-function: linear;
      animation-timeline: scroll(root);
    }
  }
</style>

{/* ------------------------------------------- JS --------------------------------------------- */}

<script define:vars={{ uniqueId }} is:inline>
  const img = document.getElementById(uniqueId);
  const parent = img.parentElement;
  if (!parent || !img) return;

  parent.style.animationPlayState = "paused";
  img.addEventListener(
    "load",
    () => {
      parent.style.animationPlayState = "running";
    },
    { once: true, passive: true }
  );
</script>
