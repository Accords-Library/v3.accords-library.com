---
import type {
  EndpointImage,
  EndpointMediaThumbnail,
  EndpointScanImage,
} from "src/shared/payload/payload-sdk";
import { getRandomId } from "src/utils/random";
import { sizesToSrcset } from "src/utils/img";

interface Props {
  img: EndpointImage | EndpointMediaThumbnail | EndpointScanImage;
}

const {
  img: { url, width, height, sizes },
} = Astro.props;

const uniqueId = getRandomId();
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<img
  id={uniqueId}
  src={url}
  srcset={sizesToSrcset(sizes)}
  sizes="100vw"
  width={width}
  height={height}
  loading="lazy"
  class="when-no-print"
  decoding="async"
  alt=""
  inert
/>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 0.3;
    }
  }

  img {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -9999;

    width: 100%;
    max-height: 100%;

    object-fit: cover;
    object-position: 50% 0;

    animation: fadeIn 3s forwards;

    @media (max-width: 650.5px) {
      display: none;
    }

    mask-image: linear-gradient(to bottom, rgba(0 0 0 / 100%) min(50vh, 50%), transparent),
      linear-gradient(to right, rgba(0 0 0 / 10%), rgba(0 0 0 / 20%) 640px, black 1200px);
    mask-composite: intersect;
  }
</style>

{/* ------------------------------------------- JS --------------------------------------------- */}

<script define:vars={{ uniqueId }} is:inline>
  const element = document.getElementById(uniqueId);
  element.style.animationPlayState = "paused";

  element.addEventListener(
    "load",
    () => {
      element.style.animationPlayState = "running";
    },
    { once: true, passive: true }
  );
</script>
