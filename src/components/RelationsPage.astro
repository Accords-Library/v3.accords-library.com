---
import ChronologyEventPreview from "components/Previews/ChronologyEventPreview.astro";
import CollectiblePreview from "components/Previews/CollectiblePreview.astro";
import FolderPreview from "components/Previews/FolderPreview.astro";
import { Collections } from "src/shared/payload/constants";
import type {
  EndpointChronologyEvent,
  EndpointCollectiblePreview,
  EndpointFolderPreview,
  EndpointRelation,
} from "src/shared/payload/endpoint-types";
import ReturnToParentCard from "./AppLayout/components/Topbar/components/ReturnToParentCard.astro";
import AppLayoutTitle from "./AppLayout/components/AppLayoutTitle.astro";
import { getI18n } from "src/i18n/i18n";
import AppLayout from "./AppLayout/AppLayout.astro";

interface Props {
  parentPage: EndpointRelation;
  backlinks: EndpointRelation[];
}

const { backlinks, parentPage } = Astro.props;
const { formatEndpointRelation, t } = await getI18n(Astro.locals.currentLocale);
const { label } = formatEndpointRelation(parentPage);

const collectibles: EndpointCollectiblePreview[] = [];
const folders: EndpointFolderPreview[] = [];
const events: EndpointChronologyEvent[] = [];

backlinks.forEach((relation) => {
  switch (relation.type) {
    case Collections.Collectibles:
      collectibles.push(relation.value);
      break;

    case Collections.Folders:
      folders.push(relation.value);
      break;

    case Collections.ChronologyEvents:
      events.push(relation.value);
      break;

    default:
      break;
  }
});
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<AppLayout class="app">
  <AppLayoutTitle title={t("global.relationPage.title")} />

  <ReturnToParentCard parent={parentPage} />

  {
    collectibles.length > 0 && (
      <section>
        <h2 class="font-3xl font-serif">
          {t("global.collections.collectibles", { count: collectibles.length })}
        </h2>
        <p>{t("global.relationPage.collectibles", { title: label, count: folders.length })}</p>
        <div class="grid">
          {collectibles.map((collectible) => (
            <CollectiblePreview collectible={collectible} />
          ))}
        </div>
      </section>
    )
  }

  {
    folders.length > 0 && (
      <section>
        <h2 class="font-3xl font-serif">
          {t("global.collections.folders", { count: folders.length })}
        </h2>
        <p>{t("global.relationPage.folders", { title: label, count: folders.length })}</p>
        <div class="grid">
          {folders.map((folder) => (
            <FolderPreview folder={folder} />
          ))}
        </div>
      </section>
    )
  }

  {
    events.length > 0 && (
      <section>
        <h2 class="font-3xl font-serif">{t("global.collections.chronologyEvents")}</h2>
        <p>{t("global.relationPage.timelineEvents", { title: label, count: folders.length })}</p>
        <div class="grid">
          {events.map(({ date, events }) =>
            events.map((event) => <ChronologyEventPreview date={date} event={event} />)
          )}
        </div>
      </section>
    )
  }
</AppLayout>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  .app {
    display: flex;
    flex-direction: column;
    gap: 32px;
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: clamp(6px, 2vmin, 16px);
    align-items: start;

    @media (max-width: 40rem) {
      grid-template-columns: 1fr 1fr;
      row-gap: 12px;
    }

    @media (max-width: 24rem) {
      grid-template-columns: 1fr;
    }
  }

  section {
    margin-block: 3em;

    & > h2 {
      margin-bottom: 0.5em;
    }

    & > p {
      margin-bottom: 3em;
    }
  }
</style>
