---
import Card from "components/Card.astro";
import { Icon } from "astro-icon/components";
import type { ComponentProps } from "astro/types";
import { getI18n } from "src/i18n/i18n";
import InlineAttributes from "components/InlineAttributes.astro";
import { sizesToSrcset, sizesForGridLayout } from "src/utils/img";
import type { Attribute } from "src/utils/attributes";
import type {
  EndpointAttribute,
  EndpointImagePreview,
  EndpointPayloadImage,
  EndpointScanImage,
} from "src/shared/payload/endpoint-types";
import { AttributeTypes } from "src/shared/payload/constants";

interface Props {
  thumbnail?: EndpointImagePreview | EndpointPayloadImage | EndpointScanImage | undefined;
  pretitle?: string | undefined;
  title: string;
  subtitle?: string | undefined;
  lang?: string | undefined;
  href?: string | undefined;
  attributes?: ComponentProps<typeof InlineAttributes>["attributes"];
  disableRoundedTop?: boolean;
  smallTitle?: boolean;
  icon?: string;
  iconHoverLabel?: string;
}

const { t, getLocalizedMatch } = await getI18n(Astro.locals.currentLocale);

const {
  thumbnail,
  title,
  pretitle,
  subtitle,
  href,
  attributes = [],
  smallTitle = false,
  disableRoundedTop = false,
  icon = "material-symbols:unknown-document",
  iconHoverLabel = t("global.previewTypes.unknown"),
  lang,
} = Astro.props;

/* Clip the number of attributes such that the card isn't ridiculously long */
let metaLength = 0;
const maxMetaLength = 230;

metaLength += (pretitle?.length ?? 0) * 1.5;
metaLength += (title?.length ?? 0) * 3;
metaLength += (subtitle?.length ?? 0) * 3;

const clippedAttributes: (Attribute | EndpointAttribute)[] = [];
for (const attribute of attributes) {
  if (metaLength > maxMetaLength) {
    clippedAttributes.pop();
    break;
  }
  if ("title" in attribute) {
    metaLength += attribute.title.length;
    metaLength += attribute.values.join(", ").length;
    clippedAttributes.push(attribute);
  } else {
    metaLength += getLocalizedMatch(attribute.translations).name.length;
    switch (attribute.type) {
      case AttributeTypes.Number:
        metaLength += attribute.value.toString().length;
        break;
      case AttributeTypes.Text:
        metaLength += attribute.value.length;
        break;
      case AttributeTypes.Tags:
        metaLength += attribute.value
          .map(({ translations }) => getLocalizedMatch(translations).name)
          .join(", ").length;
        break;
    }
    metaLength += clippedAttributes.push(attribute);
  }
  metaLength += 8;
}
---

{/* ------------------------------------------- HTML ------------------------------------------- */}

<Card
  href={href}
  disableRoundedTop={disableRoundedTop && thumbnail !== undefined}
  class="generic_preview-card">
  {
    thumbnail && (
      <img
        class:list={{ "rounded-top": !disableRoundedTop }}
        src={thumbnail.url}
        srcset={sizesToSrcset(thumbnail.sizes)}
        sizes={sizesForGridLayout(250, 1.15)}
        width={thumbnail.width}
        height={thumbnail.height}
        loading="lazy"
      />
    )
  }

  <div
    id="icon-container"
    class:list={{ "thumbnail-alt": !thumbnail, "rounded-top": !disableRoundedTop }}
    title={iconHoverLabel}>
    <Icon name={icon} width={32} height={32} />
  </div>

  <div id="footer">
    {
      smallTitle ? (
        <p lang={lang}>
          {pretitle && (
            <span id="pretitle" class="font-s">
              {pretitle}
            </span>
          )}
          <span class="font-l">{title}</span>
          {subtitle && (
            <span id="subtitle" class="font-m">
              {subtitle}
            </span>
          )}
        </p>
      ) : (
        <p lang={lang}>
          {pretitle && (
            <span id="pretitle" class="font-s">
              {pretitle}
            </span>
          )}
          <span class="font-serif font-2xl">{title}</span>
          {subtitle && (
            <span id="subtitle" class="font-serif font-m">
              {subtitle}
            </span>
          )}
        </p>
      )
    }

    {
      clippedAttributes.length > 0 && (
        <>
          {subtitle && <hr />}
          <InlineAttributes attributes={clippedAttributes} />
        </>
      )
    }
  </div>
</Card>

{/* ------------------------------------------- CSS -------------------------------------------- */}

<style>
  .generic_preview-card {
    position: relative;
    width: unset;

    &a:hover > #footer > p,
    &a:focus-visible #footer > p {
      color: var(--color-base-750);
    }

    &a:active > #footer > p {
      color: var(--color-base-1000);
    }

    & > img {
      width: 100%;
      height: auto;

      &.rounded-top {
        border-top-left-radius: 14px;
        border-top-right-radius: 14px;
      }
    }

    & > #icon-container {
      &.thumbnail-alt {
        margin: 6px;
        margin-bottom: unset;
        aspect-ratio: 3/2;
        background-color: var(--color-elevation-2);
        color: var(--color-base-400);
        display: grid;
        place-content: center;
        border-radius: 8px;

        & > svg {
          width: 64px;
          height: 64px;
        }
      }

      &:not(.thumbnail-alt) {
        position: absolute;
        top: 6px;
        left: 6px;
        padding: 8px;
        backdrop-filter: blur(5px);
        background-color: color-mix(in srgb, var(--color-elevation-2) 60%, transparent);
      }

      &.rounded-top {
        border-radius: 8px;
      }

      border-bottom-right-radius: 8px;
    }

    & > #footer {
      padding: 1em;
      display: flex;
      flex-direction: column;
      gap: 1.2em;

      & > p {
        transition: 150ms color;
        line-height: 0.9;

        & > #pretitle {
          margin-bottom: 0.5em;
        }

        & > #subtitle {
          margin-top: 0.5em;
        }

        & > span {
          display: block;
        }
      }

      & > hr {
        border: none;
        border-top: 2px dotted var(--color-base-500);
        width: 100%;
        margin: unset;
      }
    }
  }
</style>
